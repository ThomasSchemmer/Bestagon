#pragma kernel CreatePlates
#pragma kernel MovePlates
#pragma kernel CopyBuffers

#include "Assets/Materials/Shaders/Util/Util.cginc"

/**
* Generate noise textures representing the world 
* Currently supports
*   - tectonic plates
* Uses two outputs for everything to avoid race conditions when reading/writing in threads
*/

RWTexture2D<float4> EvenResult;
RWTexture2D<float4> OddResult;

int CentersCount;
int GroupCount;
int Width;
int CurrentIndex;
StructuredBuffer<float4> Colors;
StructuredBuffer<float2> Centers;
RWStructuredBuffer<int> EvenIndices;
RWStructuredBuffer<int> OddIndices;

bool HasIndex(int State, int Index){
    return State & Index;
}

float4 GetColor(int State){
    for (int i = CentersCount; i >= 0; i --){
        if (HasIndex(State, (1 << i)))
            return Colors[i];
    }
    return float4(0, 0, 0, 1);
}

/**
* fake tectonic plates with voronoi
*/
[numthreads(16,16,1)]
void CreatePlates (uint3 id : SV_DispatchThreadID)
{
    int StateMin = 0;
    float MinDistance = 100000000000.0;
    //offset position by simplex noise
    //dont use "real" noise to still keep edges intact
    float2 uv = float2(id.x / (GroupCount * 16.0), id.y / (GroupCount * 16.0));
    uv += snoise(uv * 5) / 50;

    for (int i = 0; i < CentersCount; i++){
        // world is mirrored on all sides, so use minimum singular distance
        float DistanceX = min(abs(uv.x - Centers[i].x), abs(uv.x + 1 - Centers[i].x));
        float DistanceY = min(abs(uv.y - Centers[i].y), abs(uv.y + 1 - Centers[i].y));
        float DistanceSqr = DistanceX * DistanceX + DistanceY * DistanceY;
        if (DistanceSqr < MinDistance){
            MinDistance = DistanceSqr;
            StateMin = 1 << i;
        }
    }

    EvenResult[id.xy] = GetColor(StateMin);
    OddResult[id.xy] = GetColor(StateMin);
    EvenIndices[id.y * Width + id.x] = StateMin;
    OddIndices[id.y * Width + id.x] = StateMin;
}

/** 
* move tectonics along their direction and try to overlap them
* each tectonic plate is acccessed by State and then only pixels from that plate are moved in a random direction
* we need to update the current as well as the target pixel/plate position:
*   Target: take the higher plate (by color)
*   Current: discard plate if we leave (aka inverted direction is not the current plate)
* 
* state is taken from even and written into odd to avoid race conflicts
*/
[numthreads(16,16,1)]
void MovePlates (uint3 ID : SV_DispatchThreadID)
{
    uint Pos = ID.y * Width + ID.x;

    int State = EvenIndices[Pos];
    if (!HasIndex(State, CurrentIndex))
        return;
        
    int RandomX = map(hash1(CurrentIndex), 0, 1, -5, 5);
    int RandomY = map(hash1(CurrentIndex + 128), 0, 1, -5, 5);

    int2 Offset = int2(RandomX, RandomY);
    uint2 NextID = (ID.xy + Offset) % uint2(Width, Width);
    // avoid uint underflow, can't subtract only zero 
    uint2 PrevID = (ID.xy + uint2(Width, Width) - Offset ) % uint2(Width, Width);

    uint NextPos = NextID.y * Width + NextID.x;
    uint PrevPos = PrevID.y * Width + PrevID.x;
    int NextState = EvenIndices[NextPos];
    int PrevState = EvenIndices[PrevPos];
    
    NextState = NextState | CurrentIndex;
    PrevState = HasIndex(PrevState, CurrentIndex) ? State : State - CurrentIndex;
    
    OddIndices[Pos] =  PrevState;
    OddIndices[NextPos] = NextState;
    OddResult[ID.xy] = GetColor(PrevState);
    OddResult[NextID.xy] = GetColor(NextState);

}

// copy the buffer content from odd to even
[numthreads(16,16,1)]
void CopyBuffers (uint3 ID : SV_DispatchThreadID)
{
    uint Pos = ID.y * Width + ID.x;
    EvenIndices[Pos] = OddIndices[Pos];
    EvenResult[ID.xy] = OddResult[ID.xy];
}