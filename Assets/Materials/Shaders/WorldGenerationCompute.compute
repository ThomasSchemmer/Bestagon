#pragma kernel NoiseLand

#include "Assets/Materials/Shaders/Util/Util.cginc"

float4 Seed;
int GroupCount;
int Width;
RWStructuredBuffer<float2> Values;
RWTexture2D<float4> Image;

float LandNoise(float2 uv){
    float result = 0;
    float frequency = 3;
    float factor = 3;
    for (int i = 0; i < 5; i++){
        result = result + snoise(uv * frequency + 4) * factor;
        factor *= 0.5;
        frequency *= 2;
    }
    return result;
}


// layered simplex noise to land
[numthreads(16,16,1)]
void NoiseLand (uint3 ID : SV_DispatchThreadID)
{
    float2 uv = float2(ID.x / (GroupCount * 16.0), ID.y / (GroupCount * 16.0));
    uv += Seed.xy;
    float Height = LandNoise(uv);

    // take uv.y distance to center line as temperature range
    float Temperature = 1 - smoothstep(-0.5, 1.5, abs(0.5 - uv.y + snoise(uv * 20) / 20) * 2.5);

    float4 WaterColor = float4(28.0 / 255, 163.0 / 255, 236.0 / 255, 1);
    float4 LandColor = float4(169.0 / 255, 218.0 / 255, 63.0 / 255, 1);
    float4 BeachColor = float4(248.0 / 255, 235.0 / 255, 146.0 / 255, 1);
    float4 IceColor = float4(0.9, 0.9, 1, 1);
    float4 TundraColor = float4(0.65, 0.75, 0.4, 1);
    float4 DesertColor = float4(239/255.0, 221/255.0, 111/255.0, 1);
    float4 Land = Temperature < 0.15 ? IceColor : 
                  Temperature < 0.3 ? TundraColor :
                  Temperature > 0.7 ? DesertColor : LandColor;
    Image[ID.xy] = Height > 0.6 ? Land :
                       Height > 0.2 ? BeachColor : WaterColor;

    uint Pos = ID.y * Width + ID.x;
    Values[Pos] = float2(Height, Temperature);
    Image[ID.xy] = float4(Height, 0, 0, 1);

}